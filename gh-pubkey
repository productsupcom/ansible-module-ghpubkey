#!/usr/bin/python
import requests

"""
Ansible module for adding or removing public keys to Github.

The MIT License (MIT)

Copyright (c) 2014 ProductsUp, Yorick Terweijden yt@products-up.de

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

DOCUMENTATION = '''
---
module: authorized_key
short_description: Adds or removes an SSH public key to Github
description:
     - Adds or removes an SSH public key to a Github account
options:
  user:
    description:
      - The username for the Github account to which the key should be added
    required: true
    default: null
    aliases: [name]
  password:
    description:
      - The password for the Github account to which the key should be added
    required: true
    default: null
  key:
    description:
      - The SSH public key, as a string
    required: true
    default: null
  state:
    description:
      - Whether the given key should or should not be added or not to Github
    required: false
    choices: [ "present", "absent" ]
    default: "present"
author: Yorick Terweijden
'''

class Pubkey(object):

    platform = 'Generic'
    distribution = None
    current_keys = None

    def __new__(cls, *args, **kwargs):
        return load_platform_subclass(Pubkey, args, kwargs)

    def __init__(self, module):
        self.module     = module
        self.state      = module.params['state']
        self.name       = module.params['name']
        self.password   = module.params['password']
        self.key        = module.params['key']

        # select whether we dump additional debug info through syslog
        self.syslogging = False

    def fetch_current_keys(self):
        r = requests.get('https://api.github.com/user/keys', auth=(self.name, self.password))
        self.current_keys = r.json()
        return r.status_code == requests.codes.ok

    def process_key(self):
        # copied from authorized_keys
        VALID_SSH2_KEY_TYPES = [
            'ssh-ed25519',
            'ecdsa-sha2-nistp256',
            'ecdsa-sha2-nistp384',
            'ecdsa-sha2-nistp521', 
            'ssh-dss',
            'ssh-rsa',
        ]
        type, key_string_with_comment = self.key.split(' ', 1)
        if type not in VALID_SSH2_KEY_TYPES:
            return False
        key_string, comment = key_string_with_comment.split(' ', 1)
        return type, key_string, comment

    def key_exists(self):
        self.fetch_current_keys()
        (type, key_string, comment) = self.process_key()
        for key in self.current_keys:
            if comment == key[u'title']:
                return key[u'id']

    def add_key(self):
        (type, key_string, comment) = self.process_key()
        payload = {'title': comment, 'key': type+' '+key_string}
        r = requests.post('https://api.github.com/user/keys', data=json.dumps(payload), auth=(self.name, self.password))
        if r.status_code == requests.codes.created:
            out = "Added"
            err = None
            rc = 1
        else:
            out = "Adding failed"
            err = r.text
            rc = None
        return rc, out, err

    def delete_key(self, id):
        r = requests.delete('https://api.github.com/user/keys/' + str(id), auth=(self.name, self.password))
        if r.status_code == requests.codes.no_content:
            out = "Removed"
            err = None
            rc = 1
        else:
            out = "Removing failed"
            err = r.ktext
            rc = None
        return rc, out, err


def main():
    module = AnsibleModule(
        argument_spec = dict(
            state=dict(default='present', choices=['present', 'absent'], type='str'),
            name=dict(required=True, aliases=['user'], type='str'),
            password=dict(required=True, type='str'),
            key=dict(required=True, type='str')
        ),
        supports_check_mode=False
    )

    pubkey = Pubkey(module)

    rc = None
    out = ''
    err = ''
    result = {}
    result['name'] = pubkey.name
    result['state'] = pubkey.state
    id = pubkey.key_exists()
    if pubkey.state == 'absent':
        if id:
            (rc, out, err) = pubkey.delete_key(id)
    elif pubkey.state == 'present':
        if not id:
            (rc, out, err) = pubkey.add_key()

    if rc is None:
        result['changed'] = False
    else:
        result['changed'] = True
    if out:
        result['stdout'] = out
    if err:
        result['stderr'] = err

    module.exit_json(**result)

# import module snippets
from ansible.module_utils.basic import *
main()
